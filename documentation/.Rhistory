library(SpaceX)
devtools::install_github("ErinH1/newSpace2")
library(newSpace2)
devtools::install_github("ErinH1/newSpace2", force = TRUE)
devtools::install_github("SatwikAch/SpaceX")
library(SpaceX)
devtools::install_github("ErinH1/newSpace2")
devtools::install_github("ErinH1/newSpace2", force = TRUE)
devtools::install_github("SatwikAch/SpaceX")
library(SpaceX)
?SpaceX
SpaceX
remove.packages("SpaceX")
library(Devtools)
library(devtools)
install_github("SatwikAch/SpaceX")
17.92+33.42
157*4
157*6
425.14 - 317.02
28 + 28 + 31 + 30 + 31 + 30
################
### Library ####
################
#library(SPARK)
library(PQLseq)
library(doParallel)
library(MSFA)
library(psych)
library(phonTools)
library(MASS)
library(rlist)
###########################################
#####   Data and function sourcing   ######
###########################################
PIG_loc <- read.csv("Spatial_location_PIG.csv")
54.31 - 10.82
54.31 - 10.82 + 3.29 +0.75
10.82 - 3.29 - 0.75
20.17 + 13.61
library(devtools)
devtools::install_github('xzhoulab/SPARK')
10000000/12
833333/4
count_expr_spaceX <- readRDS("~/Dropbox (University of Michigan)/Joy - Satwik/data_DEGs/count_expr_spaceX.RDS")
locations_spaceX <- readRDS("~/Dropbox (University of Michigan)/Joy - Satwik/data_DEGs/locations_spaceX.RDS")
G = 424
L = 33
nrun = 2500
Sigma_l_post <- array(0, dim=c(G, G, nrun,L))
3500 -2366
Significant_genes <- readRDS("~/Documents/Academic_World/Projects/SpaceX_Application/SpaceX_output/DEG/DEG_results/Significant_genes.rds")
Significant_genes$`9-3`
match( c("Arl5a", "Tex2", "Hadha", "Uqcrc2", "Impa1", "Cnp", "Lpar1")== Significant_genes$`9-3` )
which(  Significant_genes$`9-3` == "Arl5a")
which(  Significant_genes$`9-3` ==  "Tex2")
which(  Significant_genes$`9-3` ==  "Hadha")
which(  Significant_genes$`9-3` ==  "Uqcrc2")
which(  Significant_genes$`9-3` ==  "Impa1")
which(  Significant_genes$`9-3` ==  "Cnp")
which(  Significant_genes$`9-3` ==  "Lpar1")
1425 + 80 + 22 + 3.75
1425 + 80
#######################
###    libraries    ###
#######################
library(fastBayesReg)
library(BayesGPfit)
library(ggplot2)
#######################
###    libraries    ###
#######################
library(fastBayesReg)
library(BayesGPfit)
library(ggplot2)
n <- 500 ## number of cells
p <- 5  ## number of genes
set.seed(100)
### Generating spatial points
Sx <- runif(n,-1,1);Sy <- runif(n,-1,1)
### Generating time points
t <- runif(n,-1,1)
### Generate eigen functions
poly_degree_S <- 40
a_S = 0.01
b_S = 10
## eigen function for spatial function
Psi_S <- GP.eigen.funcs.fast(cbind(Sx,Sy), poly_degree = poly_degree_S, a = a_S, b = b_S)
L_S <- ncol(Psi_S)
poly_degree_t <- 100
a_t <- 0.001
b_t <- 0.1
## eigen function for temporal function
Psi_t <- GP.eigen.funcs.fast(as.matrix(t), poly_degree = poly_degree_t, a = a_t, b = b_t)
L_t <- ncol(Psi_t)
### eigen values for spatial function
lambda_S <- GP.eigen.value(poly_degree = poly_degree_S, a = a_S, b = b_S, d = ncol(cbind(Sx,Sy)))
### eigen values for temporal function
lambda_t <- GP.eigen.value(poly_degree = poly_degree_t, a = a_t, b = b_t, d = ncol(as.matrix(t)))
Bases_S <- t(Psi_S)*sqrt(lambda_S)
Bases_t <- t(Psi_t)*sqrt(lambda_t)
## tau for sptial function
tauSQ_S <- rep(0.25,p) #runif(p,0.25,0.75)
## tau for temporal funciton
tauSQ_t <- rep(0.25,p) #runif(p,0.3,0.8)
## u variables
U_S <- matrix(0,nrow = L_S,ncol=p);U_t <- matrix(0,nrow = ncol(Psi_t),ncol=p);
for (j in 1:p) {
U_S[,j] <- rnorm(ncol(Psi_S),mean = 0,sd=sqrt(tauSQ_S[j])) ## u variable for spatial function
U_t[,j] <- rnorm(ncol(Psi_t),mean = 0,sd=sqrt(tauSQ_t[j])) ## u variable for temporal function
}
f_S <- crossprod(Bases_S,U_S) ## spatial function
f_t <- crossprod(Bases_t,U_t) ## temporal function
## beta function
beta_ST <- f_S + f_t
## covariates
X <- matrix(rnorm(n*p),nrow=n,ncol=p)
## error variance
sigmaSQ_e <- 0.2
## Generation of Y values
Y <- apply(beta_ST*X,1,sum) + rnorm(n,0,sqrt(sigmaSQ_e))
X_new <- cbind( t(Bases_S)*as.vector(X[,1]), t(Bases_t)*as.vector(X[,1]) )
for (j in 2:p) {
X_new <- cbind(X_new, t(Bases_S)*as.vector(X[,j]), t(Bases_t)*as.vector(X[,j]) )
}
vblr_fit <- function(X, y, lambda = 0.5, a_0 = 1e-3, b_0 = 1e-3,
max_iter = 500, epsilon_conv = 1e-5,
is_verbose = FALSE){
X <- as.matrix(X)
D <- NCOL(X)              # Number of covariates
I <- NROW(X)              # Number of observations
XX <- crossprod(X, X)     # Compute X'X
Xy <- crossprod(X, y)     # Compute X'y
yy <- c(crossprod(y))     # Compute y'y
L <- rep(-Inf, max_iter)  # Store the lower bounds
a <- a_0 + D / 2          # Compute \alpha parameter of Gamma
E_a <- a_0 / b_0          # Expectation of precision parameter
# Iterate to find optimal parameters
for (i in 2:max_iter) {
# Update covariance matrix of Gaussian factor
S <- solve(diag(E_a, D) + lambda * XX)
# Update mean of Gaussian factor
m <- lambda * S %*% Xy
# Update expectation of E[w'w]
E_ww <- as.vector(crossprod(m) + matrix.trace(S))
# Update b_N parameter of Gamma factor
b <- b_0 + 0.5 * E_ww
# Compute expectation of E[a]
E_a <- a / b
# Compute lower bound
lb_py <- 0.5 * I * log(lambda / (2 * pi)) - 0.5 * lambda * yy +
lambda * crossprod(m, Xy) - 0.5 * lambda *
matrix.trace(XX %*% (tcrossprod(m, m) + S))
lb_pw <- -0.5 * D * log(2*pi) + 0.5 * D * (digamma(a) - log(b)) -
0.5 * E_a * E_ww
lb_pa <- a_0*log(b_0) + (a_0 - 1) * (digamma(a) - log(b)) - b_0*E_a -
log(gamma(a_0))
lb_qw <- -0.5 * log(det(S)) - 0.5 * D * (1 + log(2*pi))
lb_qa <- -lgamma(a) + (a - 1)*digamma(a) + log(b) - a
L[i] <- lb_py + lb_pw + lb_pa - lb_qw - lb_qa
# Show VB difference
if (is_verbose) { cat("It:\t",i,"\tLB:\t", L[i],"\tLB_diff:\t",
L[i] - L[i - 1],"\n")}
# Check if lower bound decreases
if (L[i] < L[i - 1]) { message("Lower bound decreases!\n")}
# Check for convergence
if (L[i] - L[i - 1] < epsilon_conv) { break }
# Check if VB converged in the given maximum iterations
if (i == max_iter) {warning("VB did not converge!\n")}
}
obj <- structure(list(m = m, S = S, a = a, b = b, lambda = lambda,
X = X, I = I, D = D, L = L[2:i]),
class = "vblr")
return(obj)
}
fit_VB <- vblr_fit(X_new,Y)
library(ggplot2)
library(data.table)
library(data.table)
library(purrr)
library(purrr)
library(matrixcalc)
suppressPackageStartupMessages(require(BPRMeth))
suppressPackageStartupMessages(require(matrixcalc))
BiocManager::install("BPRMeth")
suppressPackageStartupMessages(require(BPRMeth))
library("BPRMeth")
library(BPRMeth)
library(BPRMeth)
devtools::install_github("andreaskapou/BPRMeth", build_vignettes = TRUE)
BiocManager::install("BPRMeth")
BiocManager::install("BPRMeth")
1636978/13
140*0.75
library(jpeg)
setwd("~/Documents/Academic_World/Projects/SpaceX/Code/Webpage/documentation")
img1 <- readJPEG("BC_spatial_distn.jpg")
img2 <- readJPEG("BC_Shared_network.jpg")
img3 <- readJPEG("BC_Normal_network.jpg")
img4 <- readJPEG("BC_Intermediate_network.jpg")
img5 <- readJPEG("BC_Tumor_network.jpg")
img6 <- readJPEG("BC_hub_gene.jpg")
library(av)
png_files <- sprintf("input%03d.png", 1:10)
png_files <- sprintf("input%d.png", 1:6)
png_files <- readJPEG("img%d.png", 1:6)
png_files <- readJPEG("img%d", 1:6)
%png_files <- readJPEG("img%d", 1:6)
png_files <- readJPEG("img%d", 1:6)
png_files <- sprintf("img%d", 1:6)
img1 <- readJPEG("BC_spatial_distn.jpg")
img2 <- readJPEG("BC_Shared_network.jpg")
img3 <- readJPEG("BC_Normal_network.jpg")
img4 <- readJPEG("BC_Intermediate_network.jpg")
img5 <- readJPEG("BC_Tumor_network.jpg")
img6 <- readJPEG("BC_hub_gene.jpg")
png_files
av::av_encode_video(png_files , 'output.mp4', framerate = 1)
png_files <- sprintf("img%d.jpg", 1:6)
img1.jpg <- readJPEG("BC_spatial_distn.jpg")
img2.jpg <- readJPEG("BC_Shared_network.jpg")
img3.jpg <- readJPEG("BC_Normal_network.jpg")
img1.jpg <- readJPEG("BC_spatial_distn.jpg")
img2.jpg <- readJPEG("BC_Shared_network.jpg")
img3.jpg <- readJPEG("BC_Normal_network.jpg")
png_files <- sprintf("img%d.jpg", 1:3)
img1.jpg <- readJPEG("BC_spatial_distn.jpg")
img2.jpg <- readJPEG("BC_Shared_network.jpg")
img3.jpg <- readJPEG("BC_Normal_network.jpg")
av::av_encode_video(png_files , 'output.mp4', framerate = 1)
png_files <- cbind("img%d.jpg", 1:3)
png_files <- cbind(img1.jpg,img2.jpg)
av::av_encode_video(png_files , 'output.mp4', framerate = 1)
